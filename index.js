import fs from "fs";
import { fileURLToPath } from "url";
import path, { dirname } from "path";

import { charsetConfig } from "./charset.js";
import { getGibberishWord } from "./generateGibberish.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const languageDir = path.join(__dirname, "/static/languages");
const outputDir = path.join(__dirname, "/static/bigrams");
const outputFile = path.join(outputDir, "gibberish-models-using-set.js");

function buildModels() {
  const allModels = {};
  const languageToCharsetMap = {};

  for (const group of charsetConfig) {
    const charsetName = Object.keys(group)[0];
    // const fileName = `${group}.json`;
    const languages = group[charsetName];

    const starters = new Set();
    const followers = {}; // Shared probability map for the entire charset

    for (const lang of languages) {
      // Create the reverse mapping
      languageToCharsetMap[lang] = charsetName;

      const filePath = path.join(languageDir, `${lang}.json`);
      if (!fs.existsSync(filePath)) {
        console.warn(`- Skipping: Language file not found for '${lang}'`);
        continue;
      }

      const words = JSON.parse(fs.readFileSync(filePath, "utf-8")).words;

      for (const word of words) {
        if (word.length === 0) continue;
        starters.add(word[0]);
        for (let i = 0; i < word.length - 1; i++) {
          const char = word[i];
          const nextChar = word[i + 1];
          if (!followers[char]) {
            followers[char] = new Set();
          }
          followers[char].add(nextChar);
        }
      }
    }

    const finalFollowers = {};
    for (const char in followers) {
      finalFollowers[char] = Array.from(followers[char]);
    }
    allModels[charsetName] = {
      starters: Array.from(starters),
      followers: finalFollowers,
    };
    console.log(
      `âœ“ Built model for charset '${charsetName}' with ${languages.length} language(s).`,
    );
  }

  // --- File Generation ---
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const outputContent = `// This file is auto-generated by scripts/build-gibberish-models.js
// Do not edit this file directly.

// --- Model Definitions --- typesafety ignored for now.
/*export interface GibberishModel {
  starters: string[];
  followers: { [key: string]: string[] };
}*/
export const gibberishModels /*: { [key: string]: GibberishModel } */ = ${JSON.stringify(allModels, null, 2)};

// --- Language to Charset Mapping ---
export const languageToCharsetMap /*: { [key: string]: string } */ = ${JSON.stringify(languageToCharsetMap, null, 2)};
`;

  fs.writeFileSync(outputFile, outputContent);
  console.log(`\nSuccessfully wrote gibberish models to ${outputFile}`);
}

// buildModels();

const get10Words = () => {
  let words = [];
  for (let i = 0; i < 10; i++) {
    words.push(getGibberishWord("hindi_1k"));
  }
  return words;
};

console.log(get10Words().join(" "));
